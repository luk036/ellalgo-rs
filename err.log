    Checking ellalgo-rs v0.1.0 (/home/lubuntu/Documents/github/ellalgo-rs)
warning: unused import: `UpdateByCutChoices`
 --> src/ell_calc.rs:2:28
  |
2 | use crate::cutting_plane::{UpdateByCutChoices, CutStatus};
  |                            ^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `super::*`
  --> src/example1.rs:46:9
   |
46 |     use super::*;
   |         ^^^^^^^^

warning: unused import: `ndarray::array`
  --> src/example1.rs:47:9
   |
47 |     use ndarray::array;
   |         ^^^^^^^^^^^^^^

warning: unused imports: `CutStatus`, `Options`, `cutting_plane_optim`
  --> src/example1.rs:48:32
   |
48 |     use crate::cutting_plane::{cutting_plane_optim, Options, CutStatus};
   |                                ^^^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^^^

warning: unused import: `crate::ell::Ell`
  --> src/example1.rs:49:9
   |
49 |     use crate::ell::Ell;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `super::*`
  --> src/example2.rs:38:9
   |
38 |     use super::*;
   |         ^^^^^^^^

warning: unused import: `ndarray::array`
  --> src/example2.rs:39:9
   |
39 |     use ndarray::array;
   |         ^^^^^^^^^^^^^^

warning: unused imports: `Options`, `cutting_plane_feas`
  --> src/example2.rs:40:32
   |
40 |     use crate::cutting_plane::{cutting_plane_feas, Options};
   |                                ^^^^^^^^^^^^^^^^^^  ^^^^^^^

warning: unused import: `crate::ell::Ell`
  --> src/example2.rs:41:9
   |
41 |     use crate::ell::Ell;
   |         ^^^^^^^^^^^^^^^

error[E0271]: type mismatch resolving `<T as UpdateByCutChoices>::SS == EllStable`
   --> src/ell_stable.rs:255:31
    |
255 |         T: UpdateByCutChoices<SS = EllStable, ArrayType = Self::ArrayType>,
    |                               ^^^^^^^^^^^^^^ expected associated type, found struct `EllStable`
    |
    = note: expected associated type `<T as UpdateByCutChoices>::SS`
                        found struct `EllStable`
note: the requirement `<T as UpdateByCutChoices>::SS == EllStable` appears on the impl method `update` but not on the corresponding trait method
   --> src/cutting_plane.rs:69:8
    |
66  | pub trait SearchSpace {
    |           ----------- in this trait
...
69  |     fn update<T: UpdateByCutChoices>(&mut self, cut: &(Self::ArrayType, T))
    |        ^^^^^^ this trait method doesn't have the requirement `<T as UpdateByCutChoices>::SS == EllStable`

error[E0271]: type mismatch resolving `<T as UpdateByCutChoices>::ArrayType == ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`
   --> src/ell_stable.rs:255:47
    |
242 |     type ArrayType = Array1<f64>;
    |     ----------------------------- expected this associated type
...
255 |         T: UpdateByCutChoices<SS = EllStable, ArrayType = Self::ArrayType>,
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found struct `ArrayBase`
    |
    = note: expected associated type `<T as UpdateByCutChoices>::ArrayType`
                        found struct `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`
note: the requirement `<T as UpdateByCutChoices>::ArrayType == ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>` appears on the impl method `update` but not on the corresponding trait method
   --> src/cutting_plane.rs:69:8
    |
66  | pub trait SearchSpace {
    |           ----------- in this trait
...
69  |     fn update<T: UpdateByCutChoices>(&mut self, cut: &(Self::ArrayType, T))
    |        ^^^^^^ this trait method doesn't have the requirement `<T as UpdateByCutChoices>::ArrayType == ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`

error[E0271]: type mismatch resolving `<T as UpdateByCutChoices>::SS == Ell`
   --> src/ell.rs:190:31
    |
190 |         T: UpdateByCutChoices<SS = Ell, ArrayType = Self::ArrayType>,
    |                               ^^^^^^^^ expected associated type, found struct `Ell`
    |
    = note: expected associated type `<T as UpdateByCutChoices>::SS`
                        found struct `Ell`
note: the requirement `<T as UpdateByCutChoices>::SS == Ell` appears on the impl method `update` but not on the corresponding trait method
   --> src/cutting_plane.rs:69:8
    |
66  | pub trait SearchSpace {
    |           ----------- in this trait
...
69  |     fn update<T: UpdateByCutChoices>(&mut self, cut: &(Self::ArrayType, T))
    |        ^^^^^^ this trait method doesn't have the requirement `<T as UpdateByCutChoices>::SS == Ell`

error[E0271]: type mismatch resolving `<T as UpdateByCutChoices>::ArrayType == ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`
   --> src/ell.rs:190:41
    |
177 |     type ArrayType = Arr;
    |     --------------------- expected this associated type
...
190 |         T: UpdateByCutChoices<SS = Ell, ArrayType = Self::ArrayType>,
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found struct `ArrayBase`
    |
    = note: expected associated type `<T as UpdateByCutChoices>::ArrayType`
                        found struct `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`
note: the requirement `<T as UpdateByCutChoices>::ArrayType == ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>` appears on the impl method `update` but not on the corresponding trait method
   --> src/cutting_plane.rs:69:8
    |
66  | pub trait SearchSpace {
    |           ----------- in this trait
...
69  |     fn update<T: UpdateByCutChoices>(&mut self, cut: &(Self::ArrayType, T))
    |        ^^^^^^ this trait method doesn't have the requirement `<T as UpdateByCutChoices>::ArrayType == ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`

error[E0053]: method `update_by` has an incompatible type for trait
   --> src/ell.rs:201:71
    |
201 |     fn update_by(self, ell: &mut Self::SS, grad: &Self::ArrayType) -> (CutStatus, f64) {
    |                                                                       ^^^^^^^^^^^^^^^^
    |                                                                       |
    |                                                                       expected enum `CutStatus`, found tuple
    |                                                                       help: change the output type to match the trait: `CutStatus`
    |
   ::: src/cutting_plane.rs:32:70
    |
32  |     fn update_by(self, ss: &mut Self::SS, grad: &Self::ArrayType) -> CutStatus;
    |                                                                      --------- type in trait
    |
    = note: expected fn pointer `fn(_, &mut Ell, &ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>) -> CutStatus`
               found fn pointer `fn(_, &mut Ell, &ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>) -> (CutStatus, f64)`

error[E0053]: method `update_by` has an incompatible type for trait
   --> src/ell.rs:211:71
    |
211 |     fn update_by(self, ell: &mut Self::SS, grad: &Self::ArrayType) -> (CutStatus, f64) {
    |                                                                       ^^^^^^^^^^^^^^^^
    |                                                                       |
    |                                                                       expected enum `CutStatus`, found tuple
    |                                                                       help: change the output type to match the trait: `CutStatus`
    |
   ::: src/cutting_plane.rs:32:70
    |
32  |     fn update_by(self, ss: &mut Self::SS, grad: &Self::ArrayType) -> CutStatus;
    |                                                                      --------- type in trait
    |
    = note: expected fn pointer `fn((_, Option<_>), &mut Ell, &ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>) -> CutStatus`
               found fn pointer `fn((_, Option<_>), &mut Ell, &ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>) -> (CutStatus, f64)`

error[E0609]: no field `tau` on type `&EllCalc`
   --> src/ell_calc.rs:168:49
    |
168 |         [self.rho, self.sigma, self.delta, self.tau]
    |                                                 ^^^ unknown field
    |
    = note: available fields are: `use_parallel_cut`, `rho`, `sigma`, `delta`, `tsq` ... and 6 others

error[E0308]: mismatched types
   --> src/ell_stable.rs:106:42
    |
106 |         let status = self.helper.calc_dc(beta);
    |                                          ^^^^ expected `f64`, found `&f64`
    |
help: consider dereferencing the borrow
    |
106 |         let status = self.helper.calc_dc(*beta);
    |                                          +

error[E0308]: mismatched types
   --> src/ell_stable.rs:186:38
    |
186 |             self.helper.calc_ll_core(b0, b1)
    |                                      ^^ expected `f64`, found `&f64`
    |
help: consider dereferencing the borrow
    |
186 |             self.helper.calc_ll_core(*b0, b1)
    |                                      +

error[E0308]: mismatched types
   --> src/ell_stable.rs:186:42
    |
186 |             self.helper.calc_ll_core(b0, b1)
    |                                          ^^ expected `f64`, found `&f64`
    |
help: consider dereferencing the borrow
    |
186 |             self.helper.calc_ll_core(b0, *b1)
    |                                          +

error[E0308]: mismatched types
   --> src/ell_stable.rs:188:33
    |
188 |             self.helper.calc_dc(b0)
    |                                 ^^ expected `f64`, found `&f64`
    |
help: consider dereferencing the borrow
    |
188 |             self.helper.calc_dc(*b0)
    |                                 +

error[E0308]: mismatched types
   --> src/ell_stable.rs:258:9
    |
253 |     fn update<T>(&mut self, cut: &(Self::ArrayType, T)) -> (CutStatus, f64) 
    |                                                            ---------------- expected `(CutStatus, f64)` because of return type
...
258 |         beta.update_by(self, grad)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found enum `CutStatus`
    |
    = note: expected tuple `(CutStatus, f64)`
                found enum `CutStatus`

error[E0308]: mismatched types
   --> src/ell.rs:193:9
    |
188 |     fn update<T>(&mut self, cut: &(Self::ArrayType, T)) -> (CutStatus, f64) 
    |                                                            ---------------- expected `(CutStatus, f64)` because of return type
...
193 |         beta.update_by(self, grad)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found enum `CutStatus`
    |
    = note: expected tuple `(CutStatus, f64)`
                found enum `CutStatus`

error[E0308]: mismatched types
   --> src/ell.rs:203:27
    |
203 |         ell.update_single(grad, beta);
    |                           ^^^^ expected struct `ArrayBase`, found reference
    |
    = note: expected struct `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`
            found reference `&ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`

error[E0308]: mismatched types
   --> src/ell.rs:201:71
    |
201 |     fn update_by(self, ell: &mut Self::SS, grad: &Self::ArrayType) -> (CutStatus, f64) {
    |        ---------                                                      ^^^^^^^^^^^^^^^^ expected tuple, found `()`
    |        |
    |        implicitly returns `()` as its body has no tail or `return` expression
202 |         let beta = self;
203 |         ell.update_single(grad, beta);
    |                                      - help: consider removing this semicolon
    |
    = note:  expected tuple `(CutStatus, f64)`
            found unit type `()`

error[E0308]: mismatched types
   --> src/ell.rs:213:29
    |
213 |         ell.update_parallel(grad, beta);
    |                             ^^^^ expected struct `ArrayBase`, found reference
    |
    = note: expected struct `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`
            found reference `&ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`

error[E0308]: mismatched types
   --> src/ell.rs:211:71
    |
211 |     fn update_by(self, ell: &mut Self::SS, grad: &Self::ArrayType) -> (CutStatus, f64) {
    |        ---------                                                      ^^^^^^^^^^^^^^^^ expected tuple, found `()`
    |        |
    |        implicitly returns `()` as its body has no tail or `return` expression
212 |         let beta = self;
213 |         ell.update_parallel(grad, beta);
    |                                        - help: consider removing this semicolon
    |
    = note:  expected tuple `(CutStatus, f64)`
            found unit type `()`

Some errors have detailed explanations: E0053, E0271, E0308, E0609.
For more information about an error, try `rustc --explain E0053`.
warning: `ellalgo-rs` (lib) generated 9 warnings
error: could not compile `ellalgo-rs` due to 17 previous errors; 9 warnings emitted
