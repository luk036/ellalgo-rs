// mod lib;
use crate::cutting_plane::CutStatus;

/**
 * @brief Ellipsoid Search Space
 *
 *  EllCalc = {x | (x - xc)^T mq^-1 (x - xc) \le \kappa}
 *
 * Keep $mq$ symmetric but no promise of positive definite
 */
#[derive(Debug, Clone)]
pub struct EllCalc {
    pub use_parallel_cut: bool,

    pub rho: f64,
    pub sigma: f64,
    pub delta: f64,
    pub tsq: f64,

    n_f: f64,
    n_plus_1: f64,
    half_n: f64,
    cst1: f64,
    cst2: f64,
    cst3: f64,
}

impl EllCalc {
    /**
     * @brief Construct a new EllCalc object
     *
     * @tparam V
     * @tparam U
     * @param kappa
     * @param mq
     * @param x
     */
    pub fn new(n_f: f64) -> EllCalc {
        let n_plus_1 = n_f + 1.0;
        let half_n = n_f / 2.0;
        let n_sq = n_f * n_f;
        let cst0 = 1.0 / (n_f + 1.0);
        let cst1 = n_sq / (n_sq - 1.0);
        let cst2 = 2.0 * cst0;
        let cst3 = n_f * cst0;

        EllCalc {
            n_f,
            n_plus_1,
            half_n,
            cst1,
            cst2,
            cst3,
            rho: 0.0,
            sigma: 0.0,
            delta: 0.0,
            tsq: 0.0,
            use_parallel_cut: true,
        }
    }

    // pub fn update_cut(&mut self, beta: f64) -> CutStatus { self.calc_deep_cut(beta) }

    pub fn calc_parallel(&mut self, beta: &(f64, Option<f64>)) -> CutStatus {
        let (b0, b1_opt) = *beta;
        if let Some(b1) = b1_opt {
            self.calc_parallel_core(b0, b1)
        } else {
            self.calc_deep_cut(&b0)
        }
    }

    pub fn calc_parallel_central_cut(&mut self, beta: &(f64, Option<f64>)) -> CutStatus {
        let (_b0, b1_opt) = *beta;
        if let Some(b1) = b1_opt {
            self.calc_parallel_central_cut_core(b1)
        } else {
            self.calc_central_cut()
        }
    }

    /**
     * @brief
     *
     * @param[in] b0
     * @param[in] b1
     * @return i32
     */
    pub fn calc_parallel_core(&mut self, b0: f64, b1: f64) -> CutStatus {
        if b1 < b0 {
            return CutStatus::NoSoln; // no sol'n
        }

        // let b1sq = b1 * b1;
        let b1sqn = b1 * (b1 / self.tsq);
        let t1n = 1.0 - b1sqn;
        if t1n < 0.0 || !self.use_parallel_cut {
            return self.calc_deep_cut(&b0);
        }

        // if b0 == 0.0 {
        //     // central cut
        //     return self.calc_parallel_central_cut(b1);
        // }

        let b0b1n = b0 * (b1 / self.tsq);
        if self.n_f * b0b1n < -1.0 {
            return CutStatus::NoEffect; // no effect
        }

        // let t0 = self.tsq - b0 * b0;
        let t0n = 1.0 - b0 * (b0 / self.tsq);
        // let t1 = self.tsq - b1sq;
        let bsum = b0 + b1;
        let bsumn = bsum / self.tsq;
        let bav = bsum / 2.0;
        let tempn = self.half_n * bsumn * (b1 - b0);
        let xi = (t0n * t1n + tempn * tempn).sqrt();
        self.sigma = self.cst3 + (1.0 + b0b1n - xi) / (bsumn * bav) / self.n_plus_1;
        self.rho = self.sigma * bav;
        self.delta = self.cst1 * ((t0n + t1n) / 2.0 + xi / self.n_f);
        CutStatus::Success
    }

    /**
     * @brief
     *
     * @param[in] b1
     * @param[in] b1sq
     * @return void
     */
    pub fn calc_parallel_central_cut_core(&mut self, b1: f64) -> CutStatus {
        if b1 < 0.0 {
            return CutStatus::NoSoln; // no sol'n
        }
        let b1sqn = b1 * (b1 / self.tsq);
        let t1n = 1.0 - b1sqn;
        if t1n < 0.0 || !self.use_parallel_cut {
            return self.calc_central_cut();
        }
        let temp = self.half_n * b1sqn;
        let xi = (1.0 - b1sqn + temp * temp).sqrt();
        self.sigma = self.cst3 + self.cst2 * (1.0 - xi) / b1sqn;
        self.rho = self.sigma * b1 / 2.0;
        self.delta = self.cst1 * (1.0 - b1sqn / 2.0 + xi / self.n_f);
        CutStatus::Success
    }

    /**
     * @brief Deep Cut
     *
     * @param[in] beta
     * @return i32
     */
    pub fn calc_deep_cut(&mut self, beta: &f64) -> CutStatus {
        let tau = (self.tsq).sqrt();

        if tau < *beta {
            return CutStatus::NoSoln; // no sol'n
        }

        // if beta == &0.0 {
        //     return self.calc_central_cut();
        // }

        let gamma = tau + self.n_f * beta;
        if gamma < 0.0 {
            return CutStatus::NoEffect; // no effect
        }

        // self.mu = (bdiff / gamma) * self.half_n_minus_1;
        self.rho = gamma / self.n_plus_1;
        self.sigma = 2.0 * self.rho / (tau + beta);
        self.delta = self.cst1 * (1.0 - beta * (beta / self.tsq));
        CutStatus::Success
    }

    /**
     * @brief Central Cut
     *
     * @param[in] tau
     * @return i32
     */
    pub fn calc_central_cut(&mut self) -> CutStatus {
        // self.mu = self.half_n_minus_1;
        let tau = self.tsq.sqrt();
        self.sigma = self.cst2;
        self.rho = tau / self.n_plus_1;
        self.delta = self.cst1;
        CutStatus::Success
    }

    pub fn get_results(&self) -> [f64; 4] {
        [self.rho, self.sigma, self.delta, self.tsq]
    }
}

// pub trait UpdateByCutChoices {
//     fn update_by(self, ell: &mut EllCalc) -> CutStatus;
// }
#[cfg(test)]
mod tests {
    use super::*;
    use approx_eq::assert_approx_eq;

    #[test]
    pub fn test_construct() {
        let ell_calc = EllCalc::new(4.0);
        assert!(ell_calc.use_parallel_cut);
        assert_eq!(ell_calc.n_f, 4.0);
        assert_eq!(ell_calc.half_n, 2.0);
        assert_approx_eq!(ell_calc.cst1, 16.0 / 15.0);
        assert_approx_eq!(ell_calc.cst2, 0.4);
        assert_approx_eq!(ell_calc.cst3, 0.8);
    }

    #[test]
    pub fn test_calc_central_cut() {
        let mut ell_calc = EllCalc::new(4.0);
        ell_calc.tsq = 0.01;
        ell_calc.calc_central_cut();
        assert_approx_eq!(ell_calc.sigma, 0.4);
        assert_approx_eq!(ell_calc.rho, 0.02);
        assert_approx_eq!(ell_calc.delta, 16.0 / 15.0);
    }

    #[test]
    pub fn test_calc_deep_cut() {
        let mut ell_calc = EllCalc::new(4.0);
        ell_calc.tsq = 0.01;
        let status = ell_calc.calc_deep_cut(&0.11);
        assert_eq!(status, CutStatus::NoSoln);
        let status = ell_calc.calc_deep_cut(&0.0);
        assert_eq!(status, CutStatus::Success);
        let status = ell_calc.calc_deep_cut(&-0.05);
        assert_eq!(status, CutStatus::NoEffect);

        ell_calc.tsq = 0.01;
        let status = ell_calc.calc_deep_cut(&0.05);
        assert_eq!(status, CutStatus::Success);
        assert_approx_eq!(ell_calc.sigma, 0.8);
        assert_approx_eq!(ell_calc.rho, 0.06);
        assert_approx_eq!(ell_calc.delta, 0.8);
    }

    #[test]
    pub fn test_calc_parallel_central_cut() {
        let mut ell_calc = EllCalc::new(4.0);
        ell_calc.tsq = 0.01;
        let status = ell_calc.calc_parallel_central_cut_core(0.11);
        assert_eq!(status, CutStatus::Success);
        // Central cut
        assert_approx_eq!(ell_calc.sigma, 0.4);
        assert_approx_eq!(ell_calc.rho, 0.02);
        assert_approx_eq!(ell_calc.delta, 16.0 / 15.0);

        let status = ell_calc.calc_parallel_central_cut_core(0.05);
        assert_eq!(status, CutStatus::Success);
        assert_approx_eq!(ell_calc.sigma, 0.8);
        assert_approx_eq!(ell_calc.rho, 0.02);
        assert_approx_eq!(ell_calc.delta, 1.2);
    }

    #[test]
    pub fn test_calc_parallel() {
        let mut ell_calc = EllCalc::new(4.0);
        ell_calc.tsq = 0.01;
        let status = ell_calc.calc_parallel_core(0.07, 0.03);
        assert_eq!(status, CutStatus::NoSoln);

        let status = ell_calc.calc_parallel_core(0.0, 0.05);
        assert_eq!(status, CutStatus::Success);
        assert_approx_eq!(ell_calc.sigma, 0.8);
        assert_approx_eq!(ell_calc.rho, 0.02);
        assert_approx_eq!(ell_calc.delta, 1.2);

        let status = ell_calc.calc_parallel_core(0.05, 0.11);
        assert_eq!(status, CutStatus::Success);
        assert_approx_eq!(ell_calc.sigma, 0.8);
        assert_approx_eq!(ell_calc.rho, 0.06);
        assert_approx_eq!(ell_calc.delta, 0.8);

        let status = ell_calc.calc_parallel_core(-0.07, 0.07);
        assert_eq!(status, CutStatus::NoEffect);

        let status = ell_calc.calc_parallel_core(0.01, 0.04);
        assert_eq!(status, CutStatus::Success);
        assert_approx_eq!(ell_calc.sigma, 0.928);
        assert_approx_eq!(ell_calc.rho, 0.0232);
        assert_approx_eq!(ell_calc.delta, 1.232);

        let status = ell_calc.calc_parallel_core(-0.04, 0.0625);
        assert_eq!(status, CutStatus::Success);
        assert_approx_eq!(ell_calc.sigma, 0.0);
        assert_approx_eq!(ell_calc.rho, 0.0);
        assert_approx_eq!(ell_calc.delta, 1.0);
    }
}
